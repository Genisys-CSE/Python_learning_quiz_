Strings Slicing and String Operations
In Python, strings are sequences of characters, and string slicing and string operations allow you to manipulate and interact with these sequences in various ways. Below, I will cover string slicing and string operations in Python.

1. String Slicing
- String slicing is a technique to extract a substring from a string by specifying a start index, an end index, and an optional step.
    Syntax: string[start:end:step]
    - start: The index where the slice starts (inclusive). If not provided, it defaults to the beginning (0).
    - end: The index where the slice ends (exclusive). If not provided, it defaults to the end of the string.
    - step: The step (or stride) between characters. If not provided, it defaults to 1.

    Example:
    text = "Hello, World!" 
    # Slice from index 0 to 4 (exclusive)
    print(text[0:5])  # "Hello"

    Negative Indices:
    - Negative indices allow you to count from the end of the string. For example, -1 is the last character, -2 is the second-to-last, and so on.

2. String Operations
- Python provides a variety of built-in string operations to manipulate and query strings. Here are some of the most commonly used string operations:
    a. Concatenation (+)
    - You can concatenate two strings using the + operator.
        Example:
        str1 = "Hello"
        str2 = "World"
        result = str1 + " " + str2  # Adding a space between "Hello" and "World"
        print(result)  # "Hello World”

    b. Repetition (*)
    - You can repeat a string multiple times using the * operator.
        Example:
        str1 = "Hello "
        result = str1 * 3  # Repeat the string 3 times
        print(result)  # "Hello Hello Hello “

    c. Length of a String (len())
    - The len() function returns the length of the string (i.e., the number of characters).
        Example:
        text = "Hello, World!"
        print(len(text))  # 13

    d. String Membership (in, not in)
    - You can check if a substring exists in a string using the in keyword.
        Example:
        text = "Hello, World!"
        print("Hello" in text)  # True
        print("Python" in text)  # False

    e. Uppercase and Lowercase Conversion
    - You can convert a string to all uppercase or all lowercase character.
        Example:
        text = "Hello, World!"
        print(text.upper())  # "HELLO, WORLD!"
        print(text.lower())  # "hello, world!"

    f. Title Case (title())
    - The title() method capitalizes the first letter of each word.
        Example:
        text = "hello, world!"
        print(text.title())  # "Hello, World!”

Summary of String Operations:
1. Slicing: Extract substrings using string[start:end:step].
2. Concatenation: Combine strings using +.
3. Repetition: Repeat strings using *.
4. Length: Get the length of a string with len().
5. Membership: Check for substring existence with in and not in.
6. Case Conversion: Use upper(), lower(), title(), and swapcase().
7. Trimming: Remove whitespace using strip(), lstrip(), rstrip().
8. Replacement: Replace substrings with replace().
9. Finding Substrings: Use find() and rfind() to locate substrings.
10. Splitting and Joining: Split a string using split() and join list elements with join().
11. String Checking: Check if a string starts or ends with specific substrings using startswith() and endswith().
12. String Formatting: Format strings using %, str.format(), or f-strings.

These operations help you manipulate strings in a flexible and efficient way in Python.
